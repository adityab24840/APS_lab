}
prob_shared_birthday = 1 - prob_no_shared_birthday
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
```{r}
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people = 28
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - (365 / 365) ^ num_people
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Take user input for the number of people in the class
num_people <- as.integer(readline("Enter the number of people in the class: "))
# Calculate the probability of at least one shared birthday
prob_shared_birthday <- 1 - (365 / 365) ^ (num_people * (num_people - 1) / 2)
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs <- num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Take user input for the number of people in the class
num_people <- as.integer(readline("Enter the number of people in the class: "))
# Calculate the probability of at least one shared birthday
prob_shared_birthday <- 1 - (365 / 365) ^ (num_people * (num_people - 1) / 2)
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs <- num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Take user input for the number of people in the class
num_people <- as.integer(readline("Enter the number of people in the class: "))
# Calculate the probability of at least one shared birthday
prob_shared_birthday <- 1 - (factorial(365) / (365^num_people * factorial(365 - num_people)))
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs <- num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Factorial function
factorial <- function(x) {
if (x == 0) {
return(1)
} else {
return(x * factorial(x - 1))
}
}
}
# Take user input for the number of people in the class
num_people <- as.integer(readline("Enter the number of people in the class: "))
# Calculate the probability of at least one shared birthday
prob_shared_birthday <- 1 - (factorial(365) / (365^num_people * factorial(365 - num_people)))
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs <- num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Factorial function
factorial <- function(x) {
if (x == 0) {
return(1)
} else {
return(x * factorial(x - 1))
}
}
# Number of people in the class
num_people=28
# Calculate the probability of no shared birthdays
prob_no_shared_birthday = 1
for (i in 1:(num_people - 1)) {
prob_no_shared_birthday = prob_no_shared_birthday * (365 - i) / 365
}
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - prob_no_shared_birthday
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Number of people in the class
num_people=28
# Calculate the probability of no shared birthdays
prob_no_shared_birthday = 1
for (i in 1:(num_people - 1)) {
prob_no_shared_birthday = prob_no_shared_birthday * (365 - i) / 365
}
# Calculate the probability of at least one shared birthday
prob_shared_birthday = 1 - prob_no_shared_birthday
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
# Function to calculate the probability of at least one shared birthday
calculate_shared_birthday_probability = function(num_people) {
prob_no_shared_birthday = 1
for (i in 1:num_people) {
prob_no_shared_birthday = prob_no_shared_birthday * (365 - i + 1) / 365
}
return(1 - prob_no_shared_birthday)
}
# Take user input for the number of people in the class
num_people = as.integer(readline("Enter the number of people in the class: "))
# Calculate the probability of at least one shared birthday
prob_shared_birthday = calculate_shared_birthday_probability(num_people)
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
# Print the results
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
source("~/.active-rstudio-document", echo=TRUE)
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find the first pair of students with the same birthday
pair_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pair_found <- TRUE
break
}
}
if (pair_found) {
break
}
}
if (!pair_found) {
cat("No pair with the same birthday was found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find the first pair of students with the same birthday
pair_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pair_found <- TRUE
break
}
}
if (pair_found) {
break
}
}
if (!pair_found) {
cat("No pair with the same birthday was found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find the first pair of students with the same birthday
pair_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pair_found <- TRUE
break
}
}
if (pair_found) {
break
}
}
if (!pair_found) {
cat("No pair with the same birthday was found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find the first pair of students with the same birthday
pair_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pair_found <- TRUE
break
}
}
if (pair_found) {
break
}
}
if (!pair_found) {
cat("No pair with the same birthday was found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 27
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find the first pair of students with the same birthday
pair_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pair_found <- TRUE
break
}
}
if (pair_found) {
break
}
}
if (!pair_found) {
cat("No pair with the same birthday was found.\n")
}
source("~/.active-rstudio-document", echo=TRUE)
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
set.seed(123)  # Set seed for reproducibility
# Number of students in the class
num_students <- 28
# Generate random birthdays (day of the year) for each student
birthdays <- sample(1:365, num_students, replace = TRUE)
# Find pairs of students with the same birthday
pairs_found <- FALSE
for (i in 1:(num_students - 1)) {
for (j in (i + 1):num_students) {
if (birthdays[i] == birthdays[j]) {
cat("Pair of students with the same birthday:\n")
cat("Student", i, "and Student", j, "\n")
pairs_found <- TRUE
}
}
}
if (!pairs_found) {
cat("No pairs with the same birthday were found.\n")
}
# Function to calculate the probability of at least one shared birthday
calculate_shared_birthday_probability = function(num_people) {
prob_no_shared_birthday = 1
for (i in 1:num_people) {
prob_no_shared_birthday = prob_no_shared_birthday * (365 - i + 1) / 365
}
return(1 - prob_no_shared_birthday)
}
# Take user input for the number of people in the class
num_people = as.integer(readline("Enter the number of people in the class: "))
# Calculate the probability of at least one shared birthday
prob_shared_birthday = calculate_shared_birthday_probability(num_people)
# Calculate the expected number of pairs with shared birthdays
expected_shared_pairs = num_people * (num_people - 1) / 2 * prob_shared_birthday
print(paste("Probability of at least one shared birthday:", prob_shared_birthday))
#in a class of 28 students, there is approximately a 65.44% chance that at least two students will share the same birthday.
print(paste("Expected number of pairs with shared birthdays:", expected_shared_pairs))
#class with 28 students, the expected number of pairs with shared birthdays is around 247.39
