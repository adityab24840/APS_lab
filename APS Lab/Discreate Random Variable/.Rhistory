# library
library(ggridges)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(highcharter)
options(highcharter.theme = hc_theme_smpl(tooltip = list(valueDecimals = 2)))
library(igraph)
N <- 40
net <- sample_gnp(N, p = 2 / N)
wc <- cluster_walktrap(net)
V(net)$label <- seq(N)
V(net)$name <- paste("I'm #", seq(N))
V(net)$page_rank <- round(page.rank(net)$vector, 2)
V(net)$betweenness <- round(betweenness(net), 2)
V(net)$degree <- degree(net)
V(net)$size <- V(net)$degree
V(net)$comm <- membership(wc)
V(net)$color <- colorize(membership(wc))
hc <- hchart(net, layout = layout_with_fr)
library(survival)
data(lung)
lung <- mutate(lung, sex = ifelse(sex == 1, "Male", "Female"))
fit <- survfit(Surv(time, status) ~ sex, data = lung)
hc <- hchart(fit, ranges = TRUE)
hc
hc <- hchart(cor(mtcars))
hc
shiny::runApp('C:/Users/adity/OneDrive/Desktop/Seminar/Desiease')
boxplot(BMI~Outcome, main="BMI vs. Diabetes",
xlab="Outcome", ylab="BMI",col="purple")
library(lattice)
x <- 1:10
y <- x^2
xyplot(y ~ x, type = "l")
library(lattice)
x <- seq(-pi, pi, length.out = 100)
y <- seq(-pi, pi, length.out = 100)
z <- inner(x, y, function(x, y) sin(sqrt(x^2 + y^2)))
library(lattice)
x <- seq(-pi, pi, length.out = 100)
y <- seq(-pi, pi, length.out = 100)
z <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2)))
levelplot(z, xlab = "x", ylab = "y",
main = "2D Sin Function")
library(stats)
data(mtcars)
d <- dist(mtcars[, 1:4])
fit <- hclust(d)
plot(fit)
View(mtcars)
knitr::opts_chunk$set(echo = TRUE)
hc <- hchart(cor(mtcars))
hc
s_appointment = c(0, 1)
p_morning = 0.30
p_afternoon = 0.60
p_appointment = matrix(nrow = 2, ncol = 2, c(1 - p_morning, p_morning, p_afternoon, 1 - p_afternoon), byrow = TRUE)
s_software = c(0, 1)
p_software = c(0.3, 0.7)
salesResult = function() {
result = numeric(2)
for (j in c(1:2)) {
result[j] = sample(s_appointment, size = 1, prob = p_appointment[,j ])
}
earnings = ifelse(result[1] == 1, sample(s_software, size = 1, prob = p_software), 0) +
ifelse(result[2] == 1, sample(s_software, size = 1, prob = p_software), 0)
return(earnings)
}
simulations = 1e5
simulated_data = replicate(simulations, salesResult())
simulated_data
setwd("D:/Masters/Lab/Applied Probability and Statistics/Discreate Random Variable")
library(ggplot2)
library(dplyr)
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment =
# Appointment success and failure probabilities
p_morning =  # Success probability of sales in morning
p_afternoon =  # Success probability of sales in afternoon
p_appointment = matrix(nrow  = ?, ncol = ?, c(1-p_morning, , ,), byrow = TRUE)
library(ggplot2)
library(dplyr)
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment = c(0,1)
# Appointment success and failure probabilities
p_morning = 0.3 # Success probability of sales in morning
p_afternoon = 0.6 # Success probability of sales in afternoon
p_appointment = matrix(nrow  = 2, ncol = 2, c(1-p_morning, p_morning,1-p_afternoon ,p_afternoon), byrow = TRUE)
# Sampling space for software type
s_software = c(5000,10000)
# Software type probabilities
p_software =  matrix(nrow  = 2, ncol = 2, c(0.3,0.7,0,5,0.5), byrow = TRUE)
# Function that simulates one trial of the random experiment which is
# what the salesman earns on a random day
salesResult = function(){
result = numeric(2)
# Simulate whether sales happen in morning and afternoon appointments
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [1,] )
}
earnings = ifelse(result[1]==1,sample(s_software,size=1,replace = TRUE,prob = p_software[1,],),0)
+ ifelse(result[2]==2,sample(s_software,size=1,replace = TRUE,prob = p_software[2,],),0)
return(earnings)
}
# Number of simulations
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult)
simulatedData
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment = c(0,1)
# Appointment success and failure probabilities
p_morning = 0.3 # Success probability of sales in morning
p_afternoon = 0.6 # Success probability of sales in afternoon
p_appointment = matrix(nrow  = 2, ncol = 2, c(1-p_morning, p_morning,1-p_afternoon ,p_afternoon), byrow = TRUE)
# Sampling space for software type
s_software = c(5000,10000)
# Software type probabilities
p_software =  matrix(nrow  = 2, ncol = 2, c(0.3,0.7,0,5,0.5), byrow = TRUE)
# Function that simulates one trial of the random experiment which is
# what the salesman earns on a random day
salesResult = function(){
result = numeric(2)
# Simulate whether sales happen in morning and afternoon appointments
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [1,] )
}
earnings = ifelse(result[1]==1,sample(s_software,size=1,replace = TRUE,prob = p_software[1,],),0)
+ ifelse(result[2]==2,sample(s_software,size=1,replace = TRUE,prob = p_software[2,],),0)
return(earnings)
}
# Number of simulations
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult)
simulatedData
mean(simulatedData==5000)
simulatedData = replicate(nsimulations, salesResult())
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment = c(0,1)
# Appointment success and failure probabilities
p_morning = 0.3 # Success probability of sales in morning
p_afternoon = 0.6 # Success probability of sales in afternoon
p_appointment = matrix(nrow  = 2, ncol = 2, c(1-p_morning, p_morning,1-p_afternoon ,p_afternoon), byrow = TRUE)
# Sampling space for software type
s_software = c(5000,10000)
# Software type probabilities
p_software =  matrix(nrow  = 2, ncol = 2, c(0.3,0.7,0,5,0.5), byrow = TRUE)
# Function that simulates one trial of the random experiment which is
# what the salesman earns on a random day
salesResult = function(){
result = numeric(2)
# Simulate whether sales happen in morning and afternoon appointments
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [1,] )
}
earnings = ifelse(result[1]==1,sample(s_software,size=1,replace = TRUE,prob = p_software[1,],),0)
+ ifelse(result[2]==1,sample(s_software,size=1,replace = TRUE,prob = p_software[2,],),0)
return(earnings)
}
# Number of simulations
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult())
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment = c(0,1)
# Appointment success and failure probabilities
p_morning = 0.3 # Success probability of sales in morning
p_afternoon = 0.6 # Success probability of sales in afternoon
p_appointment = matrix(nrow  = 2, ncol = 2, c(1-p_morning, p_morning,1-p_afternoon ,p_afternoon), byrow = TRUE)
# Sampling space for software type
s_software = c(5000,10000)
# Software type probabilities
p_software =  matrix(nrow  = 2, ncol = 2, c(0.3,0.7,0,5,0.5), byrow = TRUE)
# Function that simulates one trial of the random experiment which is
# what the salesman earns on a random day
salesResult = function(){
result = numeric(2)
# Simulate whether sales happen in morning and afternoon appointments
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [1,] )
}
earnings = ifelse(result[1] == 1,sample(s_software, size = 1, replace = TRUE, prob = p_software[1,]), 0)
+ ifelse(result[2]==1,sample(s_software,size=1,replace = TRUE,prob = p_software[2,]),0)
return(earnings)
}
# Number of simulations
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult())
mean(simulatedData == 5000)
#all probability in a table
table(simulatedData)/nsimulations
library(ggplot2)
library(dplyr)
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment = c(0,1)
# Appointment success and failure probabilities
p_morning = 0.3 # Success probability of sales in morning
p_afternoon = 0.6 # Success probability of sales in afternoon
p_appointment = matrix(nrow  = 2, ncol = 2, c(1-p_morning, p_morning,1-p_afternoon ,p_afternoon), byrow = TRUE)
# Sampling space for software type
s_software = c(5000,10000)
# Software type probabilities
p_software =  matrix(nrow  = 2, ncol = 2, c(0.3,0.7,0,5,0.5), byrow = TRUE)
# Function that simulates one trial of the random experiment which is
# what the salesman earns on a random day
salesResult = function(){
result = numeric(2)
# Simulate whether sales happen in morning and afternoon appointments
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [1,] )
}
earnings = ifelse(result[1] == 1,sample(s_software, size = 1, replace = TRUE, prob = p_software[1,]), 0)
+ ifelse(result[2] == 1,sample(s_software,size = 1, replace = TRUE, prob = p_software[2,]), 0)
return(earnings)
}
# Number of simulations
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult())
mean(simulatedData == 5000)
#all probability in a table
table(simulatedData)/nsimulations
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [j,] )
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment = c(0,1)
# Appointment success and failure probabilities
p_morning = 0.3 # Success probability of sales in morning
p_afternoon = 0.6 # Success probability of sales in afternoon
p_appointment = matrix(nrow  = 2, ncol = 2, c(1-p_morning, p_morning,1-p_afternoon ,p_afternoon), byrow = TRUE)
# Sampling space for software type
s_software = c(5000,10000)
# Software type probabilities
p_software =  matrix(nrow  = 2, ncol = 2, c(0.3,0.7,0,5,0.5), byrow = TRUE)
# Function that simulates one trial of the random experiment which is
# what the salesman earns on a random day
salesResult = function(){
result = numeric(2)
# Simulate whether sales happen in morning and afternoon appointments
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [j,] )
}
earnings = ifelse(result[1] == 1,sample(s_software, size = 1, replace = TRUE, prob = p_software[1,]), 0)
+ ifelse(result[2] == 1,sample(s_software,size = 1, replace = TRUE, prob = p_software[2,]), 0)
return(earnings)
}
# Number of simulations
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult())
mean(simulatedData == 5000)
#all probability in a table
table(simulatedData)/nsimulations
library(ggplot2)
library(dplyr)
# Sampling space for appointment success (0 corresponds to no sale, 1 corresponds to a sale)
s_appointment = c(0,1)
# Appointment success and failure probabilities
p_morning = 0.3 # Success probability of sales in morning
p_afternoon = 0.6 # Success probability of sales in afternoon
p_appointment = matrix(nrow  = 2, ncol = 2, c(1-p_morning, p_morning,1-p_afternoon ,p_afternoon), byrow = TRUE)
# Sampling space for software type
s_software = c(5000,10000)
# Software type probabilities
p_software =  matrix(nrow  = 2, ncol = 2, c(0.3,0.7,0,5,0.5), byrow = TRUE)
# Function that simulates one trial of the random experiment which is
# what the salesman earns on a random day
salesResult = function(){
result = numeric(2)
# Simulate whether sales happen in morning and afternoon appointments
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1,replace = TRUE,prob = p_appointment [j,] )
}
earnings = ifelse(result[1] == 1,sample(s_software, size = 1, replace = TRUE, prob = p_software[1,]), 0)
+ ifelse(result[2] == 1,sample(s_software,size = 1, replace = TRUE, prob = p_software[2,]), 0)
return(earnings)
}
# Number of simulations
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult())
mean(simulatedData == 5000)
#all probability in a table
table(simulatedData)/nsimulations
s_appointment = c(0,1)
p_morning = 0.30
p_afternoon = 0.60
p_appointment = matrix(nrow = 2, ncol = 2, c(1-p_morning, p_morning, 1 - p_afternoon, p_afternoon), byrow = TRUE)
s_software = c(5000,10000)
p_software = matrix(nrow = 2, ncol = 2, c(0.3,0.7,0.5,0.5), byrow = TRUE)
salesResult = function(){
result = numeric(2)
for (j in c(1:2)){
result[j] = sample(s_appointment,size = 1, replace = TRUE, prob = p_appointment[j,])}
earnings = ifelse(result[1] == 1, sample(s_software,size = 1, replace =  TRUE, prob = p_software[1,]),0) +
ifelse(result[2] == 1, sample(s_software, size = 1, replace = TRUE, prob = p_software[2,]), 0)
return(earnings)
}
nsimulations = 1e5
simulatedData = replicate(nsimulations, salesResult())
# prob that salesman earns 5k
mean(simulatedData == 5000)
a = table(simulatedData)/nsimulations
a
# Convert simulatedData into a dataframe
dfSales = as.data.frame(simulatedData)
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
dfSales = as.data.frame(table(simulatedData))
dfSales
colnames(dfSales) = c('Earning', 'Frequency')
dfSales
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p =
p
dfSales = as.data.frame(simulatedData)
colnames(dfSales) = 'Earning'
p=ggplot(data = dfSales)+geom_bar(aes(x = Earning),fill = 'blue')
p
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p = ggplot(data = as.data.frame(dfSales),geom_col(x = Earning, y = Frequency)), fill='blue'
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p = ggplot(data = as.data.frame(dfSales),geom_col(x = Earning, y = Frequency)), fill='blue'
p = ggplot(data = as.data.frame(dfSales),geom_col(x = Earning, y = Frequency), fill='blue')
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p = ggplot(data = as.data.frame(dfSales) + geom_col(x = Earning, y = Frequency), fill='blue')
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p = ggplot(data = as.data.frame(dfSales) + geom_col(aes(x = Earning, y = Frequency)), fill='blue')
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p = ggplot(data = dfSales)
+ geom_col(aes(x = Earning, y = Frequency), fill='blue')
p = ggplot(data = dfSales) + geom_col(aes(x = Earning, y = Frequency), fill='blue')
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p = ggplot(data = dfSales) + geom_col(aes(x = Earning, y = Frequency), fill='blue')
p
dfSales = as.data.frame(simulatedData)
colnames(dfSales) = 'Earning'
p=ggplot(data = dfSales)+geom_bar(aes(x = Earning),fill = 'blue')
p
# Convert simulatedData into a dataframe
dfSales = as.data.frame(table(simulatedData))
# Add names to the columns
colnames(dfSales) = c('Earning', 'Frequency')
# Add a new column with proportion (probability) values
dfSales['Probability'] = dfSales['Frequency']/nsimulations
head(dfSales, 5)
p = ggplot(data = dfSales) + geom_col(aes(x = Earning, y = Frequency), fill='blue')
p
# Variance of the earnings using simulated values
# long term average of this random variable (X-E[X])^2
#simulatedData - mean(simulatedData) # simulated deviations
#(simulatedData - mean(simulatedData))^2 # simulated squared deviations
mean(simulatedData)
mean((simulatedData - mean(simulatedData))^2) # variance calculated using simulation
# Standard deviation of the earnings using simulated values
sqrt(mean((simulatedData - mean(simulatedData))^2))
print(' ')
# Expected value using the theoretical definition
sum(x*p)
